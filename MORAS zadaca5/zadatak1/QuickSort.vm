function QuickSort.new 1
push constant 2
call Memory.alloc 1
pop pointer 0
push argument 1
pop this 1
push argument 1
call Array.new 1
pop this 0
push constant 0
pop local 0
label WHILE_EXP0
push local 0
push argument 1
lt
not
if-goto WHILE_END0
push local 0
push this 0
add
push local 0
push argument 0
add
pop pointer 1
push that 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push pointer 0
return
function QuickSort.swap 1
push argument 0
pop pointer 0
push argument 2
push argument 1
add
pop pointer 1
push that 0
pop local 0
push argument 2
push argument 1
add
push argument 3
push argument 1
add
pop pointer 1
push that 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
push argument 3
push argument 1
add
push local 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 0
return
function QuickSort.partition 3
push argument 0
pop pointer 0
push argument 3
push argument 1
add
pop pointer 1
push that 0
pop local 0
push argument 2
push constant 1
sub
pop local 1
push argument 2
pop local 2
label WHILE_EXP0
push local 2
push argument 3
push constant 1
sub
lt
push local 2
push argument 3
push constant 1
sub
eq
or
not
if-goto WHILE_END0
push local 2
push argument 1
add
pop pointer 1
push that 0
push local 0
lt
push local 2
push argument 1
add
pop pointer 1
push that 0
push local 0
eq
or
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push local 1
push constant 1
add
pop local 1
push pointer 0
push argument 1
push local 1
push local 2
call QuickSort.swap 4
pop temp 0
label IF_FALSE0
push local 2
push constant 1
add
pop local 2
goto WHILE_EXP0
label WHILE_END0
push pointer 0
push argument 1
push local 1
push constant 1
add
push argument 3
call QuickSort.swap 4
pop temp 0
push local 1
push constant 1
add
return
function QuickSort.qsort 1
push argument 0
pop pointer 0
push argument 2
push argument 3
lt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push pointer 0
push argument 1
push argument 2
push argument 3
call QuickSort.partition 4
pop local 0
push pointer 0
push argument 1
push argument 2
push local 0
push constant 1
sub
call QuickSort.qsort 4
pop temp 0
push pointer 0
push argument 1
push local 0
push constant 1
add
push argument 3
call QuickSort.qsort 4
pop temp 0
label IF_FALSE0
push constant 0
return
function QuickSort.sort 0
push argument 0
pop pointer 0
push pointer 0
push argument 1
push constant 0
push argument 2
push constant 1
sub
call QuickSort.qsort 4
pop temp 0
push constant 0
return
function QuickSort.run 2
push argument 0
pop pointer 0
push constant 0
pop local 0
push constant 0
pop local 1
label WHILE_EXP0
push local 0
push this 1
lt
not
if-goto WHILE_END0
push local 0
push this 0
add
pop pointer 1
push that 0
call Output.printInt 1
pop temp 0
push constant 1
call String.new 1
push constant 32
call String.appendChar 2
call Output.printString 1
pop temp 0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push pointer 0
push this 0
push this 1
call QuickSort.sort 3
pop temp 0
call Output.println 0
pop temp 0
label WHILE_EXP1
push local 1
push this 1
lt
not
if-goto WHILE_END1
push local 1
push this 0
add
pop pointer 1
push that 0
call Output.printInt 1
pop temp 0
push constant 1
call String.new 1
push constant 32
call String.appendChar 2
call Output.printString 1
pop temp 0
push local 1
push constant 1
add
pop local 1
goto WHILE_EXP1
label WHILE_END1
push constant 0
return
function QuickSort.Dispose 0
push argument 0
pop pointer 0
push pointer 0
call Memory.deAlloc 1
pop temp 0
push constant 0
return
